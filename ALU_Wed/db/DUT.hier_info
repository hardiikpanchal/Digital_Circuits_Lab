|DUT
input_vector[0] => alu_beh:add_instance.B[0]
input_vector[1] => alu_beh:add_instance.B[1]
input_vector[2] => alu_beh:add_instance.B[2]
input_vector[3] => alu_beh:add_instance.B[3]
input_vector[4] => alu_beh:add_instance.A[0]
input_vector[5] => alu_beh:add_instance.A[1]
input_vector[6] => alu_beh:add_instance.A[2]
input_vector[7] => alu_beh:add_instance.A[3]
input_vector[8] => alu_beh:add_instance.sel[0]
input_vector[9] => alu_beh:add_instance.sel[1]
output_vector[0] <= alu_beh:add_instance.op[0]
output_vector[1] <= alu_beh:add_instance.op[1]
output_vector[2] <= alu_beh:add_instance.op[2]
output_vector[3] <= alu_beh:add_instance.op[3]
output_vector[4] <= alu_beh:add_instance.op[4]
output_vector[5] <= alu_beh:add_instance.op[5]
output_vector[6] <= alu_beh:add_instance.op[6]
output_vector[7] <= alu_beh:add_instance.op[7]


|DUT|alu_beh:add_instance
A[0] => shift.DATAB
A[0] => shift.DATAB
A[0] => shift.DATAB
A[0] => shift.DATAB
A[0] => shift.DATAB
A[0] => shift.DATAB
A[0] => shift.DATAB
A[0] => shift.DATAB
A[0] => diff.IN0
A[0] => op.IN0
A[0] => carry.IN0
A[0] => carry.IN0
A[0] => carry.IN0
A[0] => carry.IN1
A[0] => carry.IN1
A[0] => op.DATAA
A[1] => shift.DATAB
A[1] => shift.DATAB
A[1] => shift.DATAB
A[1] => shift.DATAB
A[1] => shift.DATAB
A[1] => shift.DATAB
A[1] => shift.DATAB
A[1] => shift.DATAB
A[1] => diff.IN0
A[1] => op.IN0
A[1] => carry.IN1
A[1] => carry.IN1
A[1] => carry.IN1
A[1] => carry.IN1
A[2] => shift.DATAB
A[2] => shift.DATAB
A[2] => shift.DATAB
A[2] => shift.DATAB
A[2] => shift.DATAB
A[2] => shift.DATAB
A[2] => shift.DATAB
A[2] => shift.DATAB
A[2] => diff.IN0
A[2] => op.IN0
A[2] => carry.IN1
A[2] => carry.IN1
A[2] => carry.IN1
A[2] => carry.IN1
A[3] => shift.DATAB
A[3] => shift.DATAB
A[3] => shift.DATAB
A[3] => shift.DATAB
A[3] => shift.DATAB
A[3] => shift.DATAB
A[3] => shift.DATAB
A[3] => shift.DATAB
A[3] => diff.IN0
A[3] => op.IN0
A[3] => carry.IN1
A[3] => carry.IN1
A[3] => carry.IN1
A[3] => carry.IN1
B[0] => LessThan0.IN8
B[0] => Decoder0.IN2
B[0] => Add1.IN14
B[0] => Decoder2.IN2
B[0] => Add3.IN14
B[0] => Decoder4.IN2
B[0] => Add5.IN14
B[0] => Decoder6.IN2
B[0] => Add7.IN14
B[0] => diff.IN1
B[0] => carry.IN1
B[0] => op.IN1
B[1] => LessThan0.IN7
B[1] => Decoder0.IN1
B[1] => Add1.IN13
B[1] => Add2.IN12
B[1] => Add3.IN13
B[1] => Decoder4.IN1
B[1] => Add5.IN13
B[1] => Add6.IN12
B[1] => Add7.IN13
B[1] => diff.IN1
B[1] => carry.IN1
B[1] => carry.IN1
B[1] => op.IN1
B[2] => LessThan0.IN6
B[2] => Decoder0.IN0
B[2] => Add1.IN12
B[2] => Add2.IN11
B[2] => Add3.IN12
B[2] => Add4.IN10
B[2] => Add5.IN12
B[2] => Add6.IN11
B[2] => Add7.IN12
B[2] => diff.IN1
B[2] => carry.IN1
B[2] => carry.IN1
B[2] => op.IN1
B[3] => LessThan0.IN5
B[3] => Add0.IN2
B[3] => count.DATAA
B[3] => diff.IN1
B[3] => carry.IN1
B[3] => carry.IN1
B[3] => op.IN1
sel[0] => Equal0.IN1
sel[0] => Equal1.IN1
sel[0] => Equal2.IN0
sel[1] => Equal0.IN0
sel[1] => Equal1.IN0
sel[1] => Equal2.IN1
op[0] <= op.DB_MAX_OUTPUT_PORT_TYPE
op[1] <= op.DB_MAX_OUTPUT_PORT_TYPE
op[2] <= op.DB_MAX_OUTPUT_PORT_TYPE
op[3] <= op.DB_MAX_OUTPUT_PORT_TYPE
op[4] <= op.DB_MAX_OUTPUT_PORT_TYPE
op[5] <= op.DB_MAX_OUTPUT_PORT_TYPE
op[6] <= op.DB_MAX_OUTPUT_PORT_TYPE
op[7] <= op.DB_MAX_OUTPUT_PORT_TYPE


